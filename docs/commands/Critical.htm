<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Critical</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Critical</h1>

<p>防止<a href="../misc/Threads.htm">当前线程</a>被其他线程中断。</p>

<pre class="Syntax">Critical [, Off]
Critical 50 <em>; 请参阅<a href="#Interval">备注底部</a>。</em></pre>
<p>如果首个参数省略 (或为单词 On), 则设置 <a href="../misc/Threads.htm">当前线程</a> 为关键的, 这意味着它不会被其他线程中断. 如果首个参数为 Off（或在 v1.0.48+ 为数字 0），则当前线程会不论 <a href="Thread.htm">Thread Interrupt</a> 设置如何都会变成可中断状态。</p>
<p>与 <a href="../misc/Threads.htm">高优先级</a> 线程不同, 在关键线程中产生的事件不会被丢弃. 例如, 在当前线程为关键线程时用户按下了 <a href="../Hotkeys.htm">热键</a>, 那么此热键会被缓冲到当前线程结束或成为非关键线程时才作为新的线程启动.</p>
<p>关键线程也会被紧急事件中断. 紧急事件包括: 1) <a href="OnExit.htm">OnExit</a> 子程序; 2) 监听消息号小于 0x312 的任何 <a href="OnMessage.htm">OnMessage()</a> 函数 (或被这些消息触发的 <a href="RegisterCallback.htm">回调</a>); 和 3) 由紧急线程自身间接触发的任何 <a href="RegisterCallback.htm">回调</a> (例如通过 <a href="PostMessage.htm">SendMessage</a> 或 <a href="DllCall.htm">DllCall</a>). 要避免被这些事件中断, 可以临时禁用这些函数.</p>
<p>当被缓冲的事件等待启动新线程时, 使用 "Critical Off" 不会立即中断当前线程. 相反, 需要经过平均 5 毫秒的时间才会进行中断. 这样在中断前, 有 99.999% 的可能性至少执行了 "Critical Off" 后的一行代码. 您可以通过延迟（例如 <code><a href="Sleep.htm">Sleep -1</a></code> 或使用 <a href="WinWait.htm">WinWait</a> 等待不存在的窗口），这样可以强制立即产生中断。</p>
<p>关键线程在显示 <a href="MsgBox.htm">MsgBox</a> 或其他对话框时, 会变成可中断的. 但是，与 <a href="Thread.htm">Thread Interrupt</a> 不同，在用户解除对话框后这个线程会再恢复为关键的。</p>
<p>请参阅 <a href="../Variables.htm#IsCritical">A_IsCritical</a> 了解如何保存和恢复 Critical 的当前设置. 然而，由于Critical是特定于线程的设置，所以当关键线程结束后，在它后面的/待恢复的线程（如果有）会自动成为非关键的。因此, 不需要在关键线程结束前执行 "Critical Off".</p>
<p>如果在自动执行段（脚本的顶部）没有使用 Critical，那么所有线程初始都为非关键的（然而还是会应用 <a href="Thread.htm">Thread Interrupt</a> 的设置）。与之相比, 如果在自动执行段中打开了 Critical 且从没有关闭过, 那么每个新启动的 <a href="../misc/Threads.htm">线程</a> (例如 <a href="../Hotkeys.htm">热键</a>, <a href="Menu.htm">自定义菜单项</a> 或 <a href="SetTimer.htm">计时</a> 子程序) 初始都为关键的.</p>
<p><a href="Thread.htm">Thread NoTimers</a> 命令类似于 Critical，不过它只防止被<a href="SetTimer.htm">计时器</a>中断。</p>
<p>在 v1.0.47+，打开 Critical 的同时也会让 <a href="SetBatchLines.htm"><code>SetBatchLines -1</code></a> 对<a href="../misc/Threads.htm">当前线程</a>生效。</p>
<p><a name="Interval"></a>在 v1.0.47+，在首个参数中使用正数（例如 <code>Critical 30</code>）会打开 Critical，但同时也改变了检查内部消息队列的间隔时间。如果没有指定数字, 则当 Critical 设置为 On 时会每隔 16 毫秒检查消息, 而 Critical 为 Off 时会每隔 5 ms 检查消息. 增加这个间隔可以延迟消息/事件的达到, 这样给 <a href="../misc/Threads.htm">当前线程</a> 更多的时间来结束. 这样降低了由于 "线程已经运行" 而丢失某些 <a href="OnMessage.htm">OnMessage()</a> 和 <a href="Gui.htm#DefaultWin">GUI 事件</a> 的可能性. 然而，等待的命令（例如 <a href="Sleep.htm">Sleep</a> 和 <a href="WinWait.htm">WinWait</a>）会不论此设置如何都使用默认间隔检查消息（一种解决方法是 <code>DllCall("Sleep", Uint, 500)</code>）。注意: 增加消息检查间隔太多可能会降低各种事件的实时响应性, 例如 <a href="Gui.htm">GUI</a> 窗口重绘.</p>
<h3>相关</h3>
<p><a href="Thread.htm">Thread（命令）</a>, <a href="../misc/Threads.htm">线程</a>, <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>, <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>, <a href="OnMessage.htm">OnMessage()</a>, <a href="RegisterCallback.htm">RegisterCallback()</a>, <a href="Hotkey.htm">Hotkey</a>, <a href="Menu.htm">Menu</a>, <a href="SetTimer.htm">SetTimer</a></p>
<h3>示例</h3>
<pre class="NoIndent">#space::  <em>; Win+Space 热键.</em>
Critical
ToolTip No new threads will launch until after this ToolTip disappears.
Sleep 3000
ToolTip  <em>; 关闭提示.</em>
return  <em>; 从热键子程序中返回, 这样结束了当前线程. 后面的线程会按设置恢复为非关键的.</em></pre>

</body>
</html>
